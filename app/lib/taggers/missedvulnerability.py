"""
@AUTHOR: nuthanmunaiah
"""

from datetime import datetime

from app.models import *
from app.lib.taggers import tagger


class MissedVulnerabilityTagger(tagger.Tagger):
    """
    Implements tagger object.
    """
    def _tag(self):
        """
        Tag all of the reviews that missed a vulnerability.
        """
        files = self._get_filesfixedforvulnerability()
        ids = self._get_missedvulnerabilityreviewids(files)
        Review.objects.filter(id__in=ids).update(missed_vulnerability=True)

        return len(ids)

    def _get_vulnerabilityfixingreviews(self):
        """
        Returns a list of reviews that fixed a vulnerability.
        """
        reviews = set()
        for vulnerability in Vulnerability.objects.all():
            for bug in vulnerability.bugs.all():
                for review in bug.review_set.all():
                    reviews.add(review)
        return reviews

    def _get_filesfixedforvulnerability(self):
        """
        Returns a dictionary of files that were altered in order to fix a
        vulnerability.
        """
        files = dict()
        for review in self._get_vulnerabilityfixingreviews():
            for file in review.document['committed_files']:
                if file not in files:
                    files[file] = datetime.min
                if review.created > files[file]:
                    files[file] = review.created
        return files

    def _get_missedvulnerabilityreviewids(self, files):
        """
        Returns a list of review IDs that are associated with reviews that
        missed a vulnerability.
        """
        ids = set()
        for (file, date) in files.items():
            if not self._is_whitelisted(file):
                continue
            reviews = Review.objects.filter(
                    created__lt=date, document__reviewed_files__has_key=file
                )
            ids |= set(list(reviews.values_list('id', flat=True)))
        return ids

    def _is_whitelisted(self, file):
        """
        Returns True if the specified file is of a type contained in the
        whitelist. False otherwise.
        """
        for type in self.settings.FILETYPES_WHITELIST:
            if file.endswith(type):
                return True
        return False
